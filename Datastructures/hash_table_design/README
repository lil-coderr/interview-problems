
built-in:
c++:
    hash_set = unordered_set
    hash_map = unordered_map 
python: 
    hash_set = set
    hash_map = dict
javascript:
    hash_set = Set
    hash_map = Map
    

Idea:
    use hash(): to map keys(the items) to buckets(index)
    hash function= x % B   -> where B is the number of buckets (array size)
        
        -hash function will depend on the range of key values and the number of buckets.

simple design: LinkedList as Bucket
        -the main idean in simple design is to maintain N=B

        -If you know, in advance, that n items will be put in the table, then choosing B = n 
            -fixed size array of size (B)
            -use linked_list to handle collisions (items with same hash value)
        
        -If you don't know the number of items in advance, 
            -then you can use a dynamic array, and double the size of the array when N=B
            - use linked list to handle collisions (items with same hash value)


complex design: dynamically sized array as Bucket
        -the main idea in complex design is to maintain a load factor (alpha) = N/B = 1 (or close to 1)


advantages:
    o(1) search , insert and delete

disadvantage:
    no order